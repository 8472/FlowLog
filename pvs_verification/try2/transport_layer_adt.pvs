%%% ADT file generated from transport_layer

transport_layer_adt: THEORY
 BEGIN

  transport_layer: TYPE

  tcp?, tl_unknown?: [transport_layer -> boolean]

  tpSrc: [(tcp?) -> nat]

  tpDst: [(tcp?) -> nat]

  payload: [transport_layer -> nat]

  tcp: [[nat, nat, nat] -> (tcp?)]

  tl_unknown: [nat -> (tl_unknown?)]

  transport_layer_ord: [transport_layer -> upto(1)]

  transport_layer_ord_defaxiom: AXIOM
    (FORALL (tpSrc: nat, tpDst: nat, payload: nat):
       transport_layer_ord(tcp(tpSrc, tpDst, payload)) = 0)
     AND
     (FORALL (payload: nat): transport_layer_ord(tl_unknown(payload)) = 1);

  ord(x: transport_layer): [transport_layer -> upto(1)] =
      CASES x
        OF tcp(tcp1_var, tcp2_var, tcp3_var): 0,
           tl_unknown(tl_unknown1_var): 1
        ENDCASES

  transport_layer_tcp_extensionality: AXIOM
    FORALL (tcp?_var: (tcp?), tcp?_var2: (tcp?)):
      tpSrc(tcp?_var) = tpSrc(tcp?_var2) AND
       tpDst(tcp?_var) = tpDst(tcp?_var2) AND
        payload(tcp?_var) = payload(tcp?_var2)
       IMPLIES tcp?_var = tcp?_var2;

  transport_layer_tcp_eta: AXIOM
    FORALL (tcp?_var: (tcp?)):
      tcp(tpSrc(tcp?_var), tpDst(tcp?_var), payload(tcp?_var)) = tcp?_var;

  transport_layer_tl_unknown_extensionality: AXIOM
    FORALL (tl_unknown?_var: (tl_unknown?),
            tl_unknown?_var2: (tl_unknown?)):
      payload(tl_unknown?_var) = payload(tl_unknown?_var2) IMPLIES
       tl_unknown?_var = tl_unknown?_var2;

  transport_layer_tl_unknown_eta: AXIOM
    FORALL (tl_unknown?_var: (tl_unknown?)):
      tl_unknown(payload(tl_unknown?_var)) = tl_unknown?_var;

  transport_layer_tpSrc_tcp: AXIOM
    FORALL (tcp1_var: nat, tcp2_var: nat, tcp3_var: nat):
      tpSrc(tcp(tcp1_var, tcp2_var, tcp3_var)) = tcp1_var;

  transport_layer_tpDst_tcp: AXIOM
    FORALL (tcp1_var: nat, tcp2_var: nat, tcp3_var: nat):
      tpDst(tcp(tcp1_var, tcp2_var, tcp3_var)) = tcp2_var;

  transport_layer_payload_tcp: AXIOM
    FORALL (tcp1_var: nat, tcp2_var: nat, tcp3_var: nat):
      payload(tcp(tcp1_var, tcp2_var, tcp3_var)) = tcp3_var;

  transport_layer_payload_tl_unknown: AXIOM
    FORALL (tl_unknown1_var: nat):
      payload(tl_unknown(tl_unknown1_var)) = tl_unknown1_var;

  transport_layer_inclusive: AXIOM
    FORALL (transport_layer_var: transport_layer):
      tcp?(transport_layer_var) OR tl_unknown?(transport_layer_var);

  transport_layer_induction: AXIOM
    FORALL (p: [transport_layer -> boolean]):
      ((FORALL (tcp1_var: nat, tcp2_var: nat, tcp3_var: nat):
          p(tcp(tcp1_var, tcp2_var, tcp3_var)))
        AND
        (FORALL (tl_unknown1_var: nat): p(tl_unknown(tl_unknown1_var))))
       IMPLIES
       (FORALL (transport_layer_var: transport_layer):
          p(transport_layer_var));

  subterm(x: transport_layer, y: transport_layer):  boolean = x = y;

  <<:  (strict_well_founded?[transport_layer]) =
      LAMBDA (x, y: transport_layer): FALSE;

  transport_layer_well_founded: AXIOM
    strict_well_founded?[transport_layer](<<);

  reduce_nat(tcp?_fun: [[nat, nat, nat] -> nat],
             tl_unknown?_fun: [nat -> nat]):
        [transport_layer -> nat] =
      LAMBDA (transport_layer_adtvar: transport_layer):
        LET red: [transport_layer -> nat] =
              reduce_nat(tcp?_fun, tl_unknown?_fun)
          IN
          CASES transport_layer_adtvar
            OF tcp(tcp1_var, tcp2_var, tcp3_var):
                 tcp?_fun(tcp1_var, tcp2_var, tcp3_var),
               tl_unknown(tl_unknown1_var):
                 tl_unknown?_fun(tl_unknown1_var)
            ENDCASES;

  REDUCE_nat(tcp?_fun: [[nat, nat, nat, transport_layer] -> nat],
             tl_unknown?_fun: [[nat, transport_layer] -> nat]):
        [transport_layer -> nat] =
      LAMBDA (transport_layer_adtvar: transport_layer):
        LET red: [transport_layer -> nat] =
              REDUCE_nat(tcp?_fun, tl_unknown?_fun)
          IN
          CASES transport_layer_adtvar
            OF tcp(tcp1_var, tcp2_var, tcp3_var):
                 tcp?_fun(tcp1_var, tcp2_var, tcp3_var,
                          transport_layer_adtvar),
               tl_unknown(tl_unknown1_var):
                 tl_unknown?_fun(tl_unknown1_var, transport_layer_adtvar)
            ENDCASES;

  reduce_ordinal(tcp?_fun: [[nat, nat, nat] -> ordinal],
                 tl_unknown?_fun: [nat -> ordinal]):
        [transport_layer -> ordinal] =
      LAMBDA (transport_layer_adtvar: transport_layer):
        LET red: [transport_layer -> ordinal] =
              reduce_ordinal(tcp?_fun, tl_unknown?_fun)
          IN
          CASES transport_layer_adtvar
            OF tcp(tcp1_var, tcp2_var, tcp3_var):
                 tcp?_fun(tcp1_var, tcp2_var, tcp3_var),
               tl_unknown(tl_unknown1_var):
                 tl_unknown?_fun(tl_unknown1_var)
            ENDCASES;

  REDUCE_ordinal(tcp?_fun: [[nat, nat, nat, transport_layer] -> ordinal],
                 tl_unknown?_fun: [[nat, transport_layer] -> ordinal]):
        [transport_layer -> ordinal] =
      LAMBDA (transport_layer_adtvar: transport_layer):
        LET red: [transport_layer -> ordinal] =
              REDUCE_ordinal(tcp?_fun, tl_unknown?_fun)
          IN
          CASES transport_layer_adtvar
            OF tcp(tcp1_var, tcp2_var, tcp3_var):
                 tcp?_fun(tcp1_var, tcp2_var, tcp3_var,
                          transport_layer_adtvar),
               tl_unknown(tl_unknown1_var):
                 tl_unknown?_fun(tl_unknown1_var, transport_layer_adtvar)
            ENDCASES;
 END transport_layer_adt

transport_layer_adt_reduce[range: TYPE]: THEORY
 BEGIN

  IMPORTING transport_layer_adt

  reduce(tcp?_fun: [[nat, nat, nat] -> range],
         tl_unknown?_fun: [nat -> range]):
        [transport_layer -> range] =
      LAMBDA (transport_layer_adtvar: transport_layer):
        LET red: [transport_layer -> range] =
              reduce(tcp?_fun, tl_unknown?_fun)
          IN
          CASES transport_layer_adtvar
            OF tcp(tcp1_var, tcp2_var, tcp3_var):
                 tcp?_fun(tcp1_var, tcp2_var, tcp3_var),
               tl_unknown(tl_unknown1_var):
                 tl_unknown?_fun(tl_unknown1_var)
            ENDCASES;

  REDUCE(tcp?_fun: [[nat, nat, nat, transport_layer] -> range],
         tl_unknown?_fun: [[nat, transport_layer] -> range]):
        [transport_layer -> range] =
      LAMBDA (transport_layer_adtvar: transport_layer):
        LET red: [transport_layer -> range] =
              REDUCE(tcp?_fun, tl_unknown?_fun)
          IN
          CASES transport_layer_adtvar
            OF tcp(tcp1_var, tcp2_var, tcp3_var):
                 tcp?_fun(tcp1_var, tcp2_var, tcp3_var,
                          transport_layer_adtvar),
               tl_unknown(tl_unknown1_var):
                 tl_unknown?_fun(tl_unknown1_var, transport_layer_adtvar)
            ENDCASES;
 END transport_layer_adt_reduce