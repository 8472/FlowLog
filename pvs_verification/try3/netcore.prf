(netcore
 (packet_destination 0
  (packet_destination-1 nil 3578311185 ("" (postpone) nil nil) nil
   shostak))
 (separation_sides 0
  (separation_sides-1 nil 3578260541
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (use "run_start_packets_origin")
        (("1" (assert)
          (("1" (expand invariant) (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skolem! +)
        (("2" (flatten)
          (("2" (use "run_transition")
            (("2" (assert)
              (("2" (case "sw(e!1) = dlSrc(pk(e!1))")
                (("1" (hide -2)
                  (("1" (expand "invariant" +) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skolem! -1)
                    (("2" (flatten)
                      (("2" (name-replace "f" "e1!1")
                        (("2" (name-replace "j" "j!1")
                          (("2" (inst - "f")
                            (("2" (assert)
                              (("2"
                                (hide -1 -4)
                                (("2"
                                  (expand "invariant" +)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "invariant" -)
                                      (("2"
                                        (expand member)
                                        (("2"
                                          (expand "pg_ex")
                                          (("2"
                                            (expand "union")
                                            (("2"
                                              (expand "union")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case
                                                   "pg_ex1(f)(e!1)")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (expand "pg_ex1")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "emptyset")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide 1)
                                                      (("2"
                                                        (expand
                                                         "pg_ex2")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -4
                                                               1
                                                               2
                                                               4)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (packet type-decl nil packet_adt nil)
    (event type-eq-decl nil netcore nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (netcore_program type-eq-decl nil netcore nil)
    (sequence type-eq-decl nil sequences nil)
    (run const-decl "sequence[setof[event]]" netcore nil)
    (pg_ex const-decl "netcore_program" netcore nil)
    (invariant const-decl "bool" netcore nil)
    (dlSrc adt-accessor-decl "[packet -> nat]" packet_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (run_start_packets_origin formula-decl nil netcore nil)
    (run_transition formula-decl nil netcore nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "netcore_program" netcore nil)
    (pg_ex2 const-decl "netcore_program" netcore nil)
    (same_side const-decl "bool" netcore nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (pg_ex1 const-decl "netcore_program" netcore nil)
    (union const-decl "set" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak)))

