%%% ADT file generated from network_layer

network_layer_adt: THEORY
 BEGIN

  network_layer: TYPE

  IMPORTING transport_layer

  ip?, nl_unknown?: [network_layer -> boolean]

  nwSrc: [(ip?) -> nat]

  nwDst: [(ip?) -> nat]

  nwProto: [(ip?) -> nat]

  tpPk: [(ip?) -> transport_layer]

  payload: [(nl_unknown?) -> nat]

  ip: [[nat, nat, nat, transport_layer] -> (ip?)]

  nl_unknown: [nat -> (nl_unknown?)]

  network_layer_ord: [network_layer -> upto(1)]

  network_layer_ord_defaxiom: AXIOM
    (FORALL (nwSrc: nat, nwDst: nat, nwProto: nat, tpPk: transport_layer):
       network_layer_ord(ip(nwSrc, nwDst, nwProto, tpPk)) = 0)
     AND
     (FORALL (payload: nat): network_layer_ord(nl_unknown(payload)) = 1);

  ord(x: network_layer): [network_layer -> upto(1)] =
      CASES x
        OF ip(ip1_var, ip2_var, ip3_var, ip4_var): 0,
           nl_unknown(nl_unknown1_var): 1
        ENDCASES

  network_layer_ip_extensionality: AXIOM
    FORALL (ip?_var: (ip?), ip?_var2: (ip?)):
      nwSrc(ip?_var) = nwSrc(ip?_var2) AND
       nwDst(ip?_var) = nwDst(ip?_var2) AND
        nwProto(ip?_var) = nwProto(ip?_var2) AND
         tpPk(ip?_var) = tpPk(ip?_var2)
       IMPLIES ip?_var = ip?_var2;

  network_layer_ip_eta: AXIOM
    FORALL (ip?_var: (ip?)):
      ip(nwSrc(ip?_var), nwDst(ip?_var), nwProto(ip?_var), tpPk(ip?_var)) =
       ip?_var;

  network_layer_nl_unknown_extensionality: AXIOM
    FORALL (nl_unknown?_var: (nl_unknown?),
            nl_unknown?_var2: (nl_unknown?)):
      payload(nl_unknown?_var) = payload(nl_unknown?_var2) IMPLIES
       nl_unknown?_var = nl_unknown?_var2;

  network_layer_nl_unknown_eta: AXIOM
    FORALL (nl_unknown?_var: (nl_unknown?)):
      nl_unknown(payload(nl_unknown?_var)) = nl_unknown?_var;

  network_layer_nwSrc_ip: AXIOM
    FORALL (ip1_var: nat, ip2_var: nat, ip3_var: nat,
            ip4_var: transport_layer):
      nwSrc(ip(ip1_var, ip2_var, ip3_var, ip4_var)) = ip1_var;

  network_layer_nwDst_ip: AXIOM
    FORALL (ip1_var: nat, ip2_var: nat, ip3_var: nat,
            ip4_var: transport_layer):
      nwDst(ip(ip1_var, ip2_var, ip3_var, ip4_var)) = ip2_var;

  network_layer_nwProto_ip: AXIOM
    FORALL (ip1_var: nat, ip2_var: nat, ip3_var: nat,
            ip4_var: transport_layer):
      nwProto(ip(ip1_var, ip2_var, ip3_var, ip4_var)) = ip3_var;

  network_layer_tpPk_ip: AXIOM
    FORALL (ip1_var: nat, ip2_var: nat, ip3_var: nat,
            ip4_var: transport_layer):
      tpPk(ip(ip1_var, ip2_var, ip3_var, ip4_var)) = ip4_var;

  network_layer_payload_nl_unknown: AXIOM
    FORALL (nl_unknown1_var: nat):
      payload(nl_unknown(nl_unknown1_var)) = nl_unknown1_var;

  network_layer_inclusive: AXIOM
    FORALL (network_layer_var: network_layer):
      ip?(network_layer_var) OR nl_unknown?(network_layer_var);

  network_layer_induction: AXIOM
    FORALL (p: [network_layer -> boolean]):
      ((FORALL (ip1_var: nat, ip2_var: nat, ip3_var: nat,
                ip4_var: transport_layer):
          p(ip(ip1_var, ip2_var, ip3_var, ip4_var)))
        AND
        (FORALL (nl_unknown1_var: nat): p(nl_unknown(nl_unknown1_var))))
       IMPLIES
       (FORALL (network_layer_var: network_layer): p(network_layer_var));

  subterm(x: network_layer, y: network_layer):  boolean = x = y;

  <<:  (strict_well_founded?[network_layer]) =
      LAMBDA (x, y: network_layer): FALSE;

  network_layer_well_founded: AXIOM strict_well_founded?[network_layer](<<);

  reduce_nat(ip?_fun: [[nat, nat, nat, transport_layer] -> nat],
             nl_unknown?_fun: [nat -> nat]):
        [network_layer -> nat] =
      LAMBDA (network_layer_adtvar: network_layer):
        LET red: [network_layer -> nat] =
              reduce_nat(ip?_fun, nl_unknown?_fun)
          IN
          CASES network_layer_adtvar
            OF ip(ip1_var, ip2_var, ip3_var, ip4_var):
                 ip?_fun(ip1_var, ip2_var, ip3_var, ip4_var),
               nl_unknown(nl_unknown1_var):
                 nl_unknown?_fun(nl_unknown1_var)
            ENDCASES;

  REDUCE_nat(ip?_fun:
               [[nat, nat, nat, transport_layer, network_layer] -> nat],
             nl_unknown?_fun: [[nat, network_layer] -> nat]):
        [network_layer -> nat] =
      LAMBDA (network_layer_adtvar: network_layer):
        LET red: [network_layer -> nat] =
              REDUCE_nat(ip?_fun, nl_unknown?_fun)
          IN
          CASES network_layer_adtvar
            OF ip(ip1_var, ip2_var, ip3_var, ip4_var):
                 ip?_fun(ip1_var, ip2_var, ip3_var, ip4_var,
                         network_layer_adtvar),
               nl_unknown(nl_unknown1_var):
                 nl_unknown?_fun(nl_unknown1_var, network_layer_adtvar)
            ENDCASES;

  reduce_ordinal(ip?_fun: [[nat, nat, nat, transport_layer] -> ordinal],
                 nl_unknown?_fun: [nat -> ordinal]):
        [network_layer -> ordinal] =
      LAMBDA (network_layer_adtvar: network_layer):
        LET red: [network_layer -> ordinal] =
              reduce_ordinal(ip?_fun, nl_unknown?_fun)
          IN
          CASES network_layer_adtvar
            OF ip(ip1_var, ip2_var, ip3_var, ip4_var):
                 ip?_fun(ip1_var, ip2_var, ip3_var, ip4_var),
               nl_unknown(nl_unknown1_var):
                 nl_unknown?_fun(nl_unknown1_var)
            ENDCASES;

  REDUCE_ordinal(ip?_fun:
                   [[nat, nat, nat, transport_layer, network_layer] ->
                      ordinal],
                 nl_unknown?_fun: [[nat, network_layer] -> ordinal]):
        [network_layer -> ordinal] =
      LAMBDA (network_layer_adtvar: network_layer):
        LET red: [network_layer -> ordinal] =
              REDUCE_ordinal(ip?_fun, nl_unknown?_fun)
          IN
          CASES network_layer_adtvar
            OF ip(ip1_var, ip2_var, ip3_var, ip4_var):
                 ip?_fun(ip1_var, ip2_var, ip3_var, ip4_var,
                         network_layer_adtvar),
               nl_unknown(nl_unknown1_var):
                 nl_unknown?_fun(nl_unknown1_var, network_layer_adtvar)
            ENDCASES;
 END network_layer_adt

network_layer_adt_reduce[range: TYPE]: THEORY
 BEGIN

  IMPORTING network_layer_adt

  IMPORTING transport_layer

  reduce(ip?_fun: [[nat, nat, nat, transport_layer] -> range],
         nl_unknown?_fun: [nat -> range]):
        [network_layer -> range] =
      LAMBDA (network_layer_adtvar: network_layer):
        LET red: [network_layer -> range] =
              reduce(ip?_fun, nl_unknown?_fun)
          IN
          CASES network_layer_adtvar
            OF ip(ip1_var, ip2_var, ip3_var, ip4_var):
                 ip?_fun(ip1_var, ip2_var, ip3_var, ip4_var),
               nl_unknown(nl_unknown1_var):
                 nl_unknown?_fun(nl_unknown1_var)
            ENDCASES;

  REDUCE(ip?_fun:
           [[nat, nat, nat, transport_layer, network_layer] -> range],
         nl_unknown?_fun: [[nat, network_layer] -> range]):
        [network_layer -> range] =
      LAMBDA (network_layer_adtvar: network_layer):
        LET red: [network_layer -> range] =
              REDUCE(ip?_fun, nl_unknown?_fun)
          IN
          CASES network_layer_adtvar
            OF ip(ip1_var, ip2_var, ip3_var, ip4_var):
                 ip?_fun(ip1_var, ip2_var, ip3_var, ip4_var,
                         network_layer_adtvar),
               nl_unknown(nl_unknown1_var):
                 nl_unknown?_fun(nl_unknown1_var, network_layer_adtvar)
            ENDCASES;
 END network_layer_adt_reduce