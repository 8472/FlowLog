flowlog: THEORY
  BEGIN
  IMPORTING packet

  %TYPES
  %sw means the arrival switch
  %pt does not mean arrival port. Instead it means the switch it came from. (Same idea, makes modeling easier)
  %pk means the packet
  event: TYPE = [# sw: nat, pt: nat, pk: packet #]
  packet_destination?(pg: [event -> setof[event]]): bool = FORALL (e: event): sw(e) = dlDst(pk(e)) IMPLIES empty?(pg(e))
  netcore_program: TYPE = (packet_destination?)
  same_size?(l: setof[list[int]]): bool = FORALL (x: list[int], y: list[int]):
  	       member(x, l) and member(y, l) IMPLIES length(x) = length(y)
  relation: TYPE = (same_size?)
  flowlog_state: TYPE = list[relation]
  flowlog_program: TYPE = [# compile: [flowlog_state -> netcore_program], update: [flowlog_state, setof[event] -> flowlog_state] #]
  network_state: TYPE = [# events: setof[event], ncore: netcore_program, fstate: flowlog_state #]

  %VARS
  e: VAR event
  np: VAR netcore_program
  r: VAR relation
  fs: VAR flowlog_state
  fp: VAR flowlog_program
  ns: VAR network_state
  n: VAR nat

  %flog_run and helper functions
  flog_run(fp): sequence[network_state]
  events(fp, n): setof[event] = events(flog_run(fp)(n))
  ncore(fp, n): netcore_program = ncore(flog_run(fp)(n))
  fstate(fp, n): flowlog_state = fstate(flog_run(fp)(n))  

  %flog_run AXIOMS
  flog_packet_origin: AXIOM empty?(events(fp, 0))

  flog_fstate_origin: AXIOM null?(fstate(fp, 0))

  flog_ncore_origin: AXIOM ncore(fp, 0) = LAMBDA e: emptyset

  flog_event_trans_1: AXIOM member(e, events(fp, n+1)) IMPLIES
  		      sw(e) = dlSrc(pk(e)) OR
		      EXISTS (e1: event): member(e1, events(fp, n))
		      AND member(e, ncore(fp, n)(e1))

  flog_event_trans_2: AXIOM EXISTS (f: event): member(f, events(fp, n))
  		      AND member(e, ncore(fp, n)(f))
		      IMPLIES member(e, events(fp, n+1))

  flog_netcore: AXIOM ncore(fp, n+1) = compile(fp)(fstate(fp, n))

  flog_state: AXIOM fstate(fp, n+1) = update(fp)(fstate(fp, n), events(fp, n))

  %MAC learning
  %this compile program assumes length(fs) = 1 and nth(fs, 0) is the learned relation
  %whose elements are of the form (sw, pt, mac)
  mac_compile(fs): netcore_program = LAMBDA e:
  LET learned: setof[list[int]] = {l: list[int] | member(l, nth(fs, 0)) AND
     		    	       	  nth(l, 0) = sw(e) AND
				  nth(l, 2) = dlDst(pk(e))} IN
  (IF nonempty?(learned) THEN {ev: event | EXISTS (l: list[int]):
     			     	  	  member(l, learned) AND
					  sw(ev) = nth(l, 1) AND %send it out the way it came
					  pt(ev) = sw(e) AND
					  pk(ev) = pk(e)}
  ELSE {ev: event | pt(ev) = sw(e) AND
       	    	    not sw(ev) = pt(e) AND
		    pk(ev) = pk(e)}
  ENDIF)

  mac_update(fs, se: setof[event]): flowlog_state = LET learned = 
  {l: list[int] | (length(l) = 3 AND
      		  member(l, fs) OR
      		  (EXISTS e: member(e, se) AND
		  nth(l, 0) = sw(e) AND
		  nth(l, 1) = pt(e) AND
		  nth(l, 2) = dlSrc(pk(e)))) AND NOT
		  (EXISTS e: member(e, se) AND
		  nth(l, 0) = sw(e) AND
		  not nth(l, 1) = pt(e) AND
		  nth(l, 2) = dlSrc(pk(e)))}
  IN cons(learned, null)
  		   
 

  END flowlog




