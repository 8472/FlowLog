
//////////
// Declarations and interface
//////////

// EVENT, OUTGOING, etc. for packet handling is all built in.

EVENT stolen_laptop_report {mac: macaddr};
EVENT stolen_laptop_cancel {mac: macaddr};
EVENT stolen_laptop_found {mac: macaddr, swid: switchid, time: int};

TABLE stolen(int48); 

//////////
// Reactive
//////////

/*
// abstraction like "named pipe": the notify_police pipe takes these events, 
// and sends them to X, Y, ...
// another pipe that takes the same events but sends to a different destination

REMOTE TABLE get_time(time: int)
  CALL time AT 127.0.0.1 9091 
  TIMEOUT 1 seconds;
*/

// Outgoing defn just defines a named pipe for events:
OUTGOING notify_police(stolen_laptop_found) THEN 
  SEND TO 127.0.0.1 5050;

REMOTE TABLE get_time(int)
  FROM time AT 127.0.0.1 9091 
  TIMEOUT 1 seconds;


/*
  Rules
*/

ON stolen_laptop_cancel(rec):
  DELETE (rec.mac) FROM stolen;

ON stolen_laptop_report(stolen):
  INSERT (stolen.mac) INTO stolen;

ON packet_in(pkt): 
  // For demonstration only: flood.
  DO forward(new) WHERE 
    new.locPt != pkt.locPt;    

  DO notify_police(pkt.dlSrc, pkt.locSw, time) WHERE 
    stolen(pkt.dlSrc) AND 
    get_time(time);  

