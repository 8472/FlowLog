
//////////
// Declarations and interface
//////////

// EVENT, OUTGOING, etc. for packet handling is all built in.

IMPORT Mac_Learning;

EVENT stolen-laptop-report {mac};
EVENT stolen-laptop-cancel {mac};
EVENT stolen-laptop-found {mac, swid, time};

TABLE stolen(int48); 
REMOTE TABLE get_time(int); 

OUTGOING notify-police(int48, int, int);
INCOMING laptop-stolen(stolen-laptop-report); 
INCOMING laptop-recovered(stolen-laptop-cancel);

//////////
// Reactive
//////////

INCOMING stolen-laptop-report THEN INSERT INTO laptop-stolen;
INCOMING stolen-laptop-cancel THEN INSERT INTO laptop-recovered;

OUTGOING notify-police(mac, swid, t) THEN 
  SEND EVENT stolen-laptop-found {mac:=mac, swid:=swid, time:=t} TO 127.0.0.1 5050;

REMOTE TABLE get_time 
  FROM time AT 127.0.0.1 9091
  TIMEOUT 1 seconds;

// To do proactive compilation well, we need to optimize. Hence
// timeout above. Default: must refresh every evaluation (bad).
// TIMEOUT: refresh every k seconds (so can last across evaluations)
// PURE: never have to refresh (used for addition, etc)

//////////
// Rules
//////////

ON laptop-recovered(rec):
  DELETE (rec.mac) FROM stolen;

ON laptop-stolen(stolen):
  INSERT (stolen.mac) INTO stolen;

on foo(bar):
  insert (x) into zot;

ON packet-in(pkt): 
  DO forward(new) WHERE 
    Mac-learning.forward(new) ON pkt;

  DO notify-police(pkt.dlSrc, pkt.locSw, time) WHERE 
    stolen(pkt.dlSrc) AND 
    get_time(time);  

ON fozzie-in(pkt): 
  DO kermit-out(new) WHERE 
    muppets.foo(new) ON pkt AND
    (R(pkt.x) OR P(pkt.x, pkt.y));
