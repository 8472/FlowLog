/*
ON packet_in(pkt) WHERE pkt.dlTyp = 0x0806 AND pkt.arp_op = 2:

EVENT ALIAS arp_request AS packet_in WHERE pkt.dlTyp = 0x0806 AND pkt.arp_op = 2

ON arp_request(pkt):
  .a...
*/

TABLE cached(ipaddr, macaddr);
// request ip, src mac, src ip, src switch, src port [last 3 should live in NIB; join with NIB]
TABLE queued(ipaddr, macaddr, ipaddr, switchid, portid);
TABLE switch_has_port(switchid, portid);

/*******************************************************************************
 *
 * HANDLE ALL REQUESTS 
 *
 ******************************************************************************/

ON arp_packet_in(request) WHERE request.arp_op = 1:

  // If we have a hardware addr cached for the target protocol addr,
  // then emit reply:

  DO emit_arp(new) WHERE  
    cached(request.arp_tpa, new.arp_sha) and

    // Make it an ARP reply
    new.arp_op = 2 and
 
    // Constrain other ARP fields based on request
    new.arp_spa = request.arp_tpa and
    new.arp_tha = request.arp_sha and
    new.arp_tpa = request.arp_spa and

    // Constrain ethernet header appropriately
    new.dlDst = request.dlSrc and
    new.dlSrc = request.arp_tha and

    // Finally, turn packet around (set exit port as entrance)
    new.locSw = request.locSw and
    new.locPt = request.locPt and

    // TODO: see if we can eliminate these...
    request.dlTyp = 0x0806 and // <--- MUST BE EXPLICIT FOR WEAKENING/compilation    
    new.dlTyp = 0x806;


  // If request is NOT cached, then add it to the table of requests queued their reply

  INSERT (request.arp_tpa, request.arp_sha, request.arp_spa, request.locSw, request.locPt) INTO queued WHERE
    request.dlTyp = 0x0806 and // <--- MUST BE EXPLICIT FOR WEAKENING/compilation    
    request.dlSrc != 0xCAFECAFE and
    not cached(request.arp_tpa, ANY);

  //
  // -- STEP 2 --
  //

  // Propagate (flood) all arp requests for unlearned addresses
  DO emit_arp(new) WHERE   
    request.dlTyp = 0x0806 and // <--- MUST BE EXPLICIT FOR WEAKENING/compilation 
    request.arp_op = 1 and 
    not cached(request.arp_tpa, ANY) and  
    not queued(request.arp_tpa, ANY, ANY, ANY, ANY) and
    new.dlSrc = 3405695742 and // CONTROLER MAC ADDRESS (0xCAFECAFE)
    switch_has_port(new.locSw, new.locPt); // REQUIRED: this rule is not compiled;

/*******************************************************************************
 *
 * HANDLE ALL REPLIES
 *
 ******************************************************************************/

ON arp_packet_in(reply) WHERE reply.arp_op = 2:
  // Learn from replies 
  // (No support for changing IP address here: once learned, always learned)
  INSERT (reply.arp_spa, reply.arp_sha) INTO cached WHERE
    reply.dlTyp = 0x0806 and // <--- MUST BE EXPLICIT FOR WEAKENING/compilation
    not cached(reply.arp_spa, ANY);

  // Clear requests queued for this reply
  DELETE (reply.arp_spa, ANY, ANY, ANY, ANY) FROM queued;

  // Send replies for any queued requests
  DO emit_arp(new) WHERE
    reply.dlTyp = 0x0806 and // <--- MUST BE EXPLICIT FOR WEAKENING/compilation    
    new.arp_op = 2 and // produces reply

    // Constrain ARP-protocol fields based on queued request
    queued(reply.arp_spa, new.arp_tha, new.arp_tpa, new.locSw, new.locPt) and
 
    new.dlTyp = 0x806 and 
    // ^^^ TODO: this is necessary for the moment...

    // Constrain remaining fields
    new.dlDst = new.arp_tha and
    new.dlSrc = reply.dlSrc and
    new.arp_spa = reply.arp_spa and
    new.arp_sha = reply.arp_sha;
