/*
 * An application to create paired flows for multicast traffic between an
 * AppleTV and the host which wishes to use it.
 *
 * TODO:
 *  - Rules should be placed on the switches where the hosts are attached
 *  - Make state soft state -- requires timeouts.
 *  - We should delete entries in atv_cxns if either side moves -- this would
 *    represent a laptop leaving a given conference room, for example.
 */

/*******************************************************************************
 *
 * Data Structures
 *
 ******************************************************************************/

EVENT atv_connect { atv_mac, client_mac };
EVENT atv_disconnect { mac };

TABLE atv_cxns(macaddr, macaddr);

/*******************************************************************************
 *
 * Handle updates to the database
 *
 ******************************************************************************/

ON atv_connect(evt): // XXX: can't be named "event" btw (conflict with keyword)
  INSERT (evt.atv_mac, evt.client_mac) INTO atv_cxns;
  INSERT (evt.client_mac, evt.atv_mac) INTO atv_cxns;

  DO emit_igmp(new) WHERE
    new.nwSrc = 0x0A0A0A01 and // TODO(adf): do we need correct IP addrs?
    new.nwDst = 0xE0000016 and // 224.0.0.22 (IGMP)

    new.igmp_ver_and_typ = 0x22 and
    new.igmp_v3typ = 0x4 and
    new.igmp_addr = 0xE00000FB and // 224.0.0.251 (mDNS)

    new.dlDst = evt.client_mac and
    new.dlSrc = evt.atv_mac and

    new.locSw = 0x1b219cfe57 and // DPID of switch controller is connected to
    new.locPt = 0xfff9; // OFPP_TABLE

  // TODO(adf): any way to re-use the code above without copy and paste?
  DO emit_igmp(new) WHERE
    new.nwSrc = 0x0A0A0A01 and // TODO(adf): do we need correct IP addrs?
    new.nwDst = 0xE0000016 and // 224.0.0.22 (IGMP)

    new.igmp_ver_and_typ = 0x22 and
    new.igmp_v3typ = 0x4 and
    new.igmp_addr = 0xE00000FB and // 224.0.0.251 (mDNS)

    new.dlDst = evt.atv_mac and
    new.dlSrc = evt.client_mac and

    new.locSw = 0x1b219cfe57 and // DPID of switch controller is connected to
    new.locPt = 0xfff9; // OFPP_TABLE



// For now, let's go with a model that either side can break the connection
ON atv_disconnect(evt):
  DELETE (evt.mac, ANY) FROM atv_cxns;
  DELETE (ANY, evt.mac) FROM atv_cxns;
  // TODO: also generate IGMP membership departure (igmp_v3typ = 0x03)

/*******************************************************************************
 *
 * Packet handling
 *
 ******************************************************************************/

ON udp_packet_in(pkt) WHERE pkt.dlDst = 0x01005e0000fb and // mDNS IPv4 ethernet address
                            pkt.nwDst = 0xE00000FB and // 224.0.0.251 (mDNS group)
                            pkt.tpDst = 5353: // (mDns port)

  DO forward(new) WHERE
    atv_cxns(pkt.dlSrc, new.dlDst) and
    pkt.locPt = 4 and // TODO(adf): temp HACK since pronto does not support wildcarded
                      // in-port for a rule like this (either the ALL or the mod_dl_dst
                      // is breaking it. see /local/logs/ofswd/current on the switch
    new.locPt != pkt.locPt; // flooding; TODO: should be forwarding directly
