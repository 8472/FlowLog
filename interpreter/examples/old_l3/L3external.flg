/*
 * Basic functionality for handling external (non-directly attached) subnets.
 *
 * The core of this module is a routing table with a list of subnets and their
 * corresponding gateway's IP address.
 *
 *
 * TODO:
 *  - expose routes as an external table which is managed by Quagga
 *  - should issue ARP requests for every nexthop (gateway) IP
 *    automatically, rather than requiring they be entered into the cached
 *    relation by hand at startup.
 */

/*******************************************************************************
 *
 * Data Structures
 *
 ******************************************************************************/

// Routing table for non-directly attached subnets
//
// Column values:
// subnet, mask, next-hop IP
TABLE routes(ipaddr, int, ipaddr);

/*******************************************************************************
 *
 * L3 routing to non-directly attached subnets
 *
 * TODO(adf): would be great if NAT were not explicitly considered here
 *
 ******************************************************************************/

// packets destined to outside whose source does NOT need NATing

ON ip_packet(pkt):
  DO forward(new) WHERE

    // generic nexthop IP selection
    routes(addr, mask, nexthop)
    and pkt.nwDst IN addr/mask

    // templated nexthop IP selection
    // @nexthop-fragment
    // AND
    // not in a local subnet for this router
    // NOT (@dst-local-subnet)

    and subnets(nexthop_subnet, nexthop_mask, ANY, new.dlSrc, pkt.locSw, new.locPt)
    and nexthop IN nexthop_subnet/nexthop_mask
    and cached(nexthop, new.dlDst) // MAC addr of nexthop IP

    // don't route packets which need NAT'ing
    and needs_nat(pkt.locSw, needs_nat_subnet, needs_nat_mask)
    and NOT (pkt.nwSrc IN needs_nat_subnet/needs_nat_mask);

/* Changed to make this apply in L3router instead, so it applies to both directly-
 * attached subnets, and to external subnets (which are handled in this file).

// packets destined to outside whose source says they need NATing

ON ip_packet(pkt):
  DO forward(new) WHERE
    routes(addr, mask, nexthop)
    and pkt.nwDst IN addr/mask

    and subnets(ANY, ANY, ANY, ANY, pkt.locSw, ANY) // TODO(adf): make a smaller relation?

    and needs_nat(pkt.locSw, needs_nat_subnet, needs_nat_mask)
    and (pkt.nwSrc IN needs_nat_subnet/needs_nat_mask)

    and new.locPt = 1; // TODO(adf): make magic NAT port configurable?

*/

/*******************************************************************************
 *
 * Per-subnet translators: outbound path to nexthop MAC addr where destination
 * MAC address is already set.
 *
 ******************************************************************************/

ON ip_packet(pkt):
  DO forward(new) WHERE

    // generic nexthop IP selection
    routes(addr, mask, nexthop)
    and pkt.nwDst IN addr/mask

    // templated nexthop IP selection

    //@nexthop-fragment-for-tr

    and subnets(nexthop_subnet, nexthop_mask, ANY, gwmac, router, rport)
    and router_tr(router, pkt.locSw)
    and nexthop IN nexthop_subnet/nexthop_mask
    and cached(nexthop, pkt.dlDst)
    and pkt.dlSrc = gwmac
    and pkt.nwDst != nexthop // this case is handled by internal routing
    and router_portmap(rport, new.locPt, pkt.locPt); // router -> host
