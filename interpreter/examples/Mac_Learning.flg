
TABLE learned(switchid, portid, macaddr);

// all the events used here are built-in

ON packet(pkt):

  // ***TODO*** Add these restrictions (which only exist for limiting to-controller traffic)
  // automatically. But not always easy! Naive learned/notlearned have some issues
  // in that to use them one sometimes needs complex joins?

  // Instead, bespoke optimizations that can be tested via change impact. (old, unoptimized ==
  // new, optimized?)

  INSERT (pkt.locSw, pkt.locPt, pkt.dlSrc) INTO learned WHERE
    not learned(pkt.locSw, pkt.locPt, pkt.dlSrc);

  DELETE (pkt.locSw, pt, pkt.dlSrc) FROM learned WHERE
    not pt = pkt.locPt
    // The optimization requirement: ctrlr will learn something new
    AND not learned(pkt.locSw, pkt.locPt, pkt.dlSrc);

    // This rule doesn't have the negations all at the end of the
    // resulting clauses. If no pkts forwarded, it means negation-shuffling has failed.
  DO forward(new) WHERE

    learned(pkt.locSw, new.locPt, pkt.dlDst)

    OR
    (NOT learned(pkt.locSw, ANY, pkt.dlDst) AND
     pkt.locPt != new.locPt);

ON switch_down(swd):
  DELETE (swd.sw, ANY, ANY) FROM learned;
