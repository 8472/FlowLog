
TABLE learned(switchid, portid, macaddr); 
TABLE switch_has_port(switchid, portid); 

// all the events used here are built-in

ON packet_in(pkt):
	
  // ***TODO*** Add these restrictions (which only exist for limiting to-controller traffic) 
  // automatically. But not always easy! Naive learned/notlearned have some issues
  // in that to use them one sometimes needs complex joins?

  // Instead, bespoke optimizations that can be tested via change impact. (old, unoptimized ==
  // new, optimized?)

  INSERT (pkt.locSw, pkt.locPt, pkt.dlSrc) INTO learned WHERE 
    not learned(pkt.locSw, pkt.locPt, pkt.dlSrc);  

  DELETE (pkt.locSw, pt, pkt.dlSrc) FROM learned WHERE
  	not pt = pkt.locPt 
    // The optimization requirement: ctrlr will learn something new
    AND not learned(pkt.locSw, pkt.locPt, pkt.dlSrc);  

    // This rule doesn't have the negations all at the end of the 
    // resulting clauses. If no pkts forwarded, it means negation-shuffling has failed.
  DO forward(new) WHERE 
    (learned(pkt.locSw, new.locPt, pkt.dlDst) AND          
      // NOTE: this line wasn't required in fully reactive version.
      // But now, we may have learned (sw=x,pt=y,mac=z) and see a packet for z
      // on port y (because the switch on that end hasn't yet learned where z is.)
      // This is missing from the stock Mac Learning Frenetic functionality, and 
      // lacking it can result in dupe packets when pinging  at topo=tree,3,3       
      pkt.locPt != new.locPt 
     )
    OR
    (NOT learned(pkt.locSw, x, pkt.dlDst) AND
     NOT pkt.locPt = new.locPt 
     // Commented out as **optimization**, only sound if compiled.
     // (If interpreted in XSB, will get a problem because new.locPt isn't bound)
     // AND switch_has_port(pkt.locSw, new.locPt)
    );
    

ON switch_port_in(swpt):
	INSERT (swpt.sw, swpt.pt) INTO switch_has_port;

// TODO: still need to use sep var names. we don't have a gensym "_" wildcard
ON switch_down(swd):
  DELETE (swd.sw, any) FROM switch_has_port;
  DELETE (swd.sw, any1, any2) FROM learned;

  