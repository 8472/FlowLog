(*
 Autogenerated by Thrift Compiler (0.8.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Flowlog_rpc_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class notifyMe_args =
object (self)
  val mutable _notify : notification option = None
  method get_notify = _notify
  method grab_notify = match _notify with None->raise (Field_empty "notifyMe_args.notify") | Some _x48 -> _x48
  method set_notify _x48 = _notify <- Some _x48
  method unset_notify = _notify <- None
  method reset_notify = _notify <- None

  method copy =
      let _new = Oo.copy self in
      if _notify <> None then
        _new#set_notify self#grab_notify#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyMe_args";
    (match _notify with None -> () | Some _v -> 
      oprot#writeFieldBegin("notify",Protocol.T_STRUCT,1);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyMe_args (iprot : Protocol.t) =
  let _str51 = new notifyMe_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t52,_id53) = iprot#readFieldBegin in
        if _t52 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id53 with 
          | 1 -> (if _t52 = Protocol.T_STRUCT then
              _str51#set_notify (read_notification iprot)
            else
              iprot#skip _t52)
          | _ -> iprot#skip _t52);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str51

class notifyMe_result =
object (self)
  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "notifyMe_result";
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_notifyMe_result (iprot : Protocol.t) =
  let _str56 = new notifyMe_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t57,_id58) = iprot#readFieldBegin in
        if _t57 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id58 with 
          | _ -> iprot#skip _t57);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str56

class virtual iface =
object (self)
  method virtual notifyMe : notification option -> unit
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method notifyMe notify = 
    self#send_notifyMe notify;
    self#recv_notifyMe
  method private send_notifyMe notify = 
    oprot#writeMessageBegin ("notifyMe", Protocol.CALL, seqid);
    let args = new notifyMe_args in
      args#set_notify notify;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_notifyMe  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let _ = read_notifyMe_result iprot in
        iprot#readMessageEnd;
        ()
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 1
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_notifyMe (seqid, iprot, oprot) =
    let args = read_notifyMe_args iprot in
      iprot#readMessageEnd;
      let result = new notifyMe_result in
        (handler#notifyMe args#get_notify);
        oprot#writeMessageBegin ("notifyMe", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "notifyMe" self#process_notifyMe;
end

