blackbox emit;
import Mac_Learning;

module Startup_Emit:


type startup = {};

action forward(pkt : packet, newpkt : packet) :- Mac_Learning.forward(pkt, newpkt), not pkt.dlSrc = 0;

// This actually won't work: no switches will have registered yet!
// action emit(st: startup, newpkt : packet) :- newpkt.locSw = 1, newpkt.locPt = 1;

// For NIB, instead, react to switch registration as initial event.
action emit(swpt: switch_port, newpkt : packet) :- newpkt.locSw = swpt.switch, newpkt.locPt = swpt.port;


// In NIB, a better way would be: a fresh nonce for EACH PACKET EMITTED, and stored in a table. This means that the packets // need not carry their source directly, but more importantly, hosts couldn't spoof. But this is a challenge! More than what
// was sent before. Because AFTER THE SWPT, in the timer triggered emit, it's the unconstraint in the new packet's location
// that says "all ports get a packet" Including a nonce(X) there only gets called once, even if it's fresh. Need a stronger // effect.