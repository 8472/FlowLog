****OUTDATED****

Redesign ideas.

File organization:

	First imports and blackboxes.
	Syntax: 
	import file_name; //file_name is the name of a .flg file in the same directory, minus the file extension.
		the file_name must be the same case etc as the name of the file. This is the only place where case matters.
	
	blackbox bbname; // introduces an internal blackbox. Right now the only one is forward.
	blackbox bbname @ ip_addr, port_num; // introduces an external blackbox. The name here must start with bb and no
		other clauses may start with bb. The ip is written in the form 00:00:00:00 as always and the port number is
		written as any other number (or in the form 0x9034 etc).
	
	Then a module declaration.
	Syntax:
	module module_name: // the module_name should be the same as the file name though right now we aren't enforcing
		this. It will just be convenient because imports are done by filename not module name. Module names cannot start with bb as this is reserved for external blackboxes.
	
	Then type definitions and clauses.
	Syntax:
	type type_name = { field_id_1, ..., field_id_n }; // the fields of a typed variable will be accessed with a '.'
	
	clause_type clause_name(var_1, var_2, ..., var_n) // clause_type is one of plus, minus, helper, or action.
		Example:
		helper rel(v1, v2, pkt : packet) :- ...; // the variables can be primitive variables or typed variables
		plus learned(pkt : packet, v1, v2, pkt2 : packet) :- ...; // this is a plus relation for the learned
			relation note that they have the same name. The first argument must be a type argument and the others must have the same types of those in the learned relation. This applies for minus as well.
		action forward(pkt : packet, newpkt : packet) :- ...; // action clauses must have exactly two fields, both
			of which are typed variables. The name of an action clause must be a blackbox. Helper, plus, and minus clauses cannot share names with action clauses. When a module is imported into another module the action clauses are turned into helper clauses.

		One other thing to note is that it's illegal to have a helper clause of the same name as a plus or minus
		clause. This is because the state modified by the plus and minus shouldn't also depend on other clauses.
	
	Body of a clause:
	The body of a clause is a comma separated list of atoms ended by a semicolon.
	Atoms are either
	A = B,
	relation(A, B, ..., N),
	true,
	false,
	or not followed by any of the above.
	For the second type, relation can be a relation of the current module, or it can be a relation of a different
	module, or it can be an external blackbox query.
	1) this module: learned(A, B, C)
	2) other module called mod: mod.learned(A, B, C)
	3) external blackbox query: bbox.learned(A, B, C)
	The second and third cannot overlap because external blackboxes start with bb and module names cannot.

Internal Data Types:
	(* either internal or external in which case it has an ip and a port. *)
	type bb_type = Internal | External of string * int | Defer;;
	(* actual blackbox. *)
	type blackbox = BlackBox of string * bb_type;;
	(* type name, field names *)
	type term_type = Type of string * string list | Defer of string option;;
	(* constants, variables, field refs *)
	type term = Constant of string list * term_type | Variable of string * term_type | Field_ref of term * string;;
	type sign = Pos | Neg;;
	(* things like A = B or R(A, B, C). For apply its sign, module, relation, args *)
	type atom = Equals of sign * term * term | Apply of sign * blackbox option * string * term list | Bool of bool;;
	(* type of clause *)
	type clause_type = Plus | Minus | Helper | Action;;
	(* name, arguments, body *)
	type clause = Clause of clause_type * string * term list * atom list;;
	(* name, module names to be imported, black boxes, notification types, clauses *)	
	type program = Program of string * string list * blackbox list * term_type list * clause list;;

	This is the new data type scheme. It was just modified to have a more comprehensive term type.
	Now notifications are just Constants and all variables (notification or raw) are Variables.
	This was prompted by a problem which we previously had where if there were two clauses

	type t1 = { X, Y };
	type t2 = { Z, W };

	helper rel(a1 : t1, a2 : t1) :- a1.X = a2.Y;
	helper rel(b1 : t2, b2 : t2) :- b1.W = b2.Z;

	these two clauses would step on eachother's feet and xsb would just know about ONE relation:
	rel(A1_X, A1_Y, A2_X, A2_Y) :- A1_X = A2_Y.
	rel(B1_Z, B1_W, B2_Z, B2_W) :- B1_W = B2_Z.

	which is the wrong behavior. Now xsb will know about TWO relations:

	rel_t1_t1(A1_X, A1_Y, A2_X, A2_Y) :- A1_X = A2_Y.
	rel_t2_t2(B1_Z, B1_W, B2_Z, B2_W) :- B1_W = B2_Z.

	In order to make this easy to implement its nice to let notification values be arguments to clauses which
	was not allowed in the previous model. That's what prompted us to make the new type definition.

	The reason for BB_defer is that when parsing an Apply there might be a blackbox, but the parser can't know
	from context anything about it but its name. Similarly there is Term_defer for parsing a Field_ref.


Evaluation:

	The command line Run_Flowlog.d.byte takes in a flowlog filename (name.flg) of a file in the current directory.
	It then parses it in and recursively parses in all imported modules (they must all be in the same directory).
	The imported modules are added to the module that was ran and evaluation begins.
	
	Thrift is called to start listening for notifications, and xsb is sent relations to start its database.
	Every clause is desugared and sent to xsb, and every state clause (implicitly defined by plus and minus clauses) is asserted false. Then Ox begins listening for packets. When a notification arrives (either from thrift or as a packet from Ox), the Evaluation.respond_to_notification function is run on the program and the notification that arrived. This function runs through every action, minus, and plus clause (in that order) and checks if the type of the incoming notifiaction matches the type of the first argument to that clause. If it does then it does the following:
	1) Action: queries the clause and finds out what notifications to send out. If it's to an external blackbox
	it sends it out. If its to an internal blackbox, it queues it to be sent out. When the action clauses are finished a flush function is called to send out the queued notifications to the internal blackboxes (this is needed because all packets have to be sent out together.)
	2) Minus: queries the clause and finds out what should be retracted from its associated state relation. These are then retracted.
	3) Plus: queries the clause and finds out what should be asserted to its associated state relation. These are
	then asserted.

Blackbox queries:

	When querying a relation, xsb can handle everything except for the blackbox queries. Right now we are doing a very simple thing which will not work in general: when a relation is queried, find all of the blackbox query atoms in it, and query those verbatim (with variables and maybe some constants) to the blackbox. If we are lucky the blackbox will return a finite set of answers which we then assert as facts to xsb. Then the relation is queried to xsb and the desired answer is returned. Afterwards, the facts asserted to xsb from the blackbox are retracted. In the future we will need a better algorithm that can handle blackbox queries that return infinitely many answers because in the context of variables being bound they may actually provide only finitely many answers.