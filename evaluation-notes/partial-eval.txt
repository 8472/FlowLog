A static netcore policy says what to do when packets are received:

[[STPOL]]: PKT --> 2^(PKT + {controller})

and NetCore has a very nice verified compiler that takes those and
produces flow tables, etc.

Yet a PROGRAM in our language defines a transducer whose states are
controller states, with packet arrivals as inputs and sets of packet
departures (including sending to the controller) as outputs.

[[PROGRAM]]: STATE * PKT --> STATE * 2^(PKT + {controller})

And of course, at any given state, the program induces a transition
function for that state:

[[PROGRAM]](State): PKT --> STATE * 2^(PKT + {controller})

NetCore has a verified compiler that turns STPOL into flow tables. So
the question is: can we build a syntax transformer, that for a program
in a given controller state, produces the appropriate STPOL that we
can then feed to the NetCore compiler?

**That is**, a T such that: 

T: PROGRAM x STATE --> STPOL
[[T]](P, S) = [[P]](S) | component 2

Partial evaluation is the way to go. Each rule will have a condition
formula, some atoms in which are about the state. We just replace
those with stateless formulas built from the current state. For
instance:

(emit-controller pkt) :- 
  (Not (learned pkt.loc.sw pkt.loc.port pkt.header.dlsrc)))

In a state with learned = {(1, 2, 3)}, becomes:

(emit-controller pkt) :- 
  (Not (And (= pkt.loc.sw 1) 
            (= pkt.loc.port 2)
            (= pkt.header.dlsrc 3)))

This way, we can keep NetCore's verified compiler from static policies
to flow tables: we just produce a new static policy every time the
controller state changes!
