auto_table.
%set_prolog_flag(unknown, fail).

%forward(P1, P2, P3, P4, P5, P6, P7, P8) :- P1 = P3, P2 = 5, I1 = P1, I2 = P2, packet_in(I1, I2, I3, I4, I5, I6, I7, I8).
% remember: negated atom vars need to be positively constrained. XSB won't warn us.
%forward(P1, P2, P3, P4, P5, P6, P7, P8) :- r(12, P1, P2), I1 = P1, packet_in(I1, I2, I3, I4, I5, I6, I7, I8), not P2 = P1. 

r(12, 7, 23).
r(12, 2, 5).

%packet_in(i1, i2, i3, i4, i5, i6, i7, i8).
%packet_in(I1, I2, I3, I4, I5, I6, I7, I8).


% test: tell me about the behavior!
% forward(A1, A2, A3, A4, A5, A6, A7, A8).
% not good enough above. need to simulate "old" semantics?
% no way to connect I1 to the internal I1 if pass vars to packet_in here
% if we do lowercase, will it let them be equal on occasion?
%proactive_test_forward(I1, I2, I3, I4, I5, I6, I7, I8, A1, A2, A3, A4, A5, A6, A7, A8) :-
%	packet_in(I1, I2, I3, I4, I5, I6, I7, I8), 
%	%I1=i1, I2=i2, I3=i3, I4=i4, I5=i5, I6=i6, I7=i7, I8=i8,
%	forward(A1, A2, A3, A4, A5, A6, A7, A8).


% setof(X, proactive_test_forward(I1, I2, I3, I4, I5, I6, I7, I8, A1, A2, A3, A4, A5, A6, A7, A8), Bag).

% just pass the clause bodies separately, after asserting packet_in(I1, I2, I3, I4, I5, I6, I7, I8).
% (then retract it after all clauses passed)

% but what is VALID?

packet_in(I1, I2, I3, I4, I5, I6, I7, I8).

switch_has_port(1, 1).
switch_has_port(1, 2).
switch_has_port(1, 3).
switch_has_port(2, 1).
switch_has_port(2, 2).

learned(1, 2, 10).

% packet_in(1,2,3,4,5,6,7,8).

%% Mac learning "other" rule:
forward(P1, P2, P3, P4, P5, P6, P7, P8) :-
  packet_in(I1, I2, I3, I4, I5, I6, I7, I8),
  P8 = I8, P7 = I7, P6 = I6, P5 = I5, P4 = I4, P3 = I3, P1 = I1,
  switch_has_port(I1, P2),
  switch_has_port(I1, I2),  
  not learned(I1, ANY, I4),
  not I2 = P2.  % <--- not ok. because I2 never concretized, xsb will say no. 
  % note that with  _CONCRETE_  packet_in, this is not a problem.
  % we'd be fine using XSB for proactive compiling if there was no negation. but WITh negation, not sophisticated enough.

  %% REBUTTAL:
  % can't we just add switch_has_port(I1, I2) too?
  % tested. that isn't enough. (but why not?)
  
  % removing I2 not equal P2 gets results, but odd. why not sw=1? would just mean that dlSrc != 10. 
    % no domain for I4 (dlsrc)? but no way to give one (gotta cover macs not seen)
     % and here is where prolog'd need to say "I4: anything but 10". but it won't, because no domain for I4. 
     % can say integer(3). --> yes, but integer(X) ---> no.
% NOTE: this issue isn't caused by the "trapped variables" --- it is inherent in using 
% prolog w/ negation in this way (unfixed pkt-in)

%%%%%%%%%%%%

% Ok, so don't try to solve the general problem. Solve the common case first, and reactively handle uncommon special cases 
% (like joins over existentials...which is, what, the ONLY case not handled in the prototype? Just do what the prototype 
% does at first! It covers _all our examples_ right?)

% FORBIDDEN (pass to controller always):
% (1) joins over existentials [can do better]
% (2) assigns to newpkt fields not supported for modif. in OF [up to openflow to allow]
% (3) assigns to allowed newpkt field in pkt-dependent way, not state-dep way 
%    e.g. newpkt.dlSrc = pkt.dlDst
%    but R(newpkt.dlSrc, pkt.dlDst) is ok
%    ^^^ this may result in multiple packets being sent. but that's fine.
%    SPECIAL CASE: newpkt.locPt != pkt.locPt. Means to use AllPorts.


% step: validate clause set: no forbidden joins or assignments
% step: partial evaluation
% step: split out pkt and newpkt constraints
% step: produce a flat netcore policy from the pair of constraint-sets
%        ^ this is where newpkt.locPt != pkt.locPt gets turned into AllPorts.
%        ^ (**Q** how to handle switch_has_port?)


% optimizations later
% - build deltas rather than rebuilding whole policy [does frenetic support this?]
% - boolean simplification of conditions
% - store copy of state internally to controller (avoid calling out to xsb to extract relations)
