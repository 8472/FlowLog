/*******************************************************************************
 *
 * Primitive contents of "Mac_Learning.inc.flg"
 *
 ******************************************************************************/

TABLE learned(switchid, portid, macaddr);

TABLE switches_without_mac_learning(switchid);

/*
 * TODO: how should we create the syntax to indicate that MAC learning should
 * not be handle packets handled elsewhere? at the same time, it is the
 * forwarding module, so we may want it to handle traffic which doesn't enter
 * via packet_in anyway. Note that we *do* want to learn from the ARP traffic,
 * although we are ignoring it for now...
 *
 * TODO: Positioning of "pkt.dlTyp != 0x0806" is an open question -- Can we
 * achieve both of these goals?
 *   1) learn from packets which come through the system
 *   2) not affect forwarding of ARP traffic in any way? (including via the
 *      INSERT rule)
 * When positioned on the initial `ON packet_in(pkt)`, we get smaller flow
 * tables from NetCore (helping compensate for NetCore issue #142), but we don't
 * learn anything from ARP traffic. A wholly different approach would be for the
 * ARP handlers above to explicitly add to the learned relation, but I don't
 * like that mixing as it violates modularity...
 *
 */

ON packet(pkt) WHERE pkt.dlTyp != 0x0806 and // ARP
                     pkt.dlDst != 0x01005e000016 and // IGMP ethernet multicast.
                                                     // this should be an explicit drop in AppleTV.flg.
                     pkt.dlDst != 0x3333000000fb and // mDNS IPv6 ethernet multicast
                     pkt.dlDst != 0x01005e0000fb and // mDNS IPv4 ethernet multicast

                                                     // TODO(adf): drop 802.1D bridge-local frames
                     not switches_without_mac_learning(pkt.locSw):

  // ***TODO*** Add these restrictions (which only exist for limiting to-controller traffic)
  // automatically. But not always easy! Naive learned/notlearned have some issues
  // in that to use them one sometimes needs complex joins?

  // Instead, bespoke optimizations that can be tested via change impact. (old, unoptimized ==
  // new, optimized?)

  INSERT (pkt.locSw, pkt.locPt, pkt.dlSrc) INTO learned WHERE
    not learned(pkt.locSw, pkt.locPt, pkt.dlSrc);

  DELETE (pkt.locSw, pt, pkt.dlSrc) FROM learned WHERE
    not pt = pkt.locPt
    // The optimization requirement: ctrlr will learn something new
    AND not learned(pkt.locSw, pkt.locPt, pkt.dlSrc);

    // This rule doesn't have the negations all at the end of the
    // resulting clauses. If no pkts forwarded, it means negation-shuffling has failed.
  DO forward(new) WHERE
    learned(pkt.locSw, new.locPt, pkt.dlDst)
    OR
    (NOT learned(pkt.locSw, ANY, pkt.dlDst) AND
     pkt.locPt != new.locPt);

ON switch_down(swd):
  DELETE (swd.sw, ANY, ANY) FROM learned;
