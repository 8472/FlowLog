///////////////////////////////////////////////////////////
// Before panicking, make sure that you aren't testing with single,n.
// There's no topology to learn there!
//
// Moreover: pkt.dlTyp = 0x1001 represents a NIB test packet
///////////////////////////////////////////////////////////


EVENT start_timer {seconds: int, id: string};
EVENT timer_expired {id: int};

TABLE ucSwTopo(switchid, portid, switchid, portid);
TABLE ucTree(switchid, portid);
TABLE ucTC(switchid, switchid);

TABLE switchTopology(switchid, portid, switchid, portid);
TABLE spanningTree(switchid, portid);

// Distinguish switchTopology from overall topology
// (we use switchTopology and spanning tree for L2 mac-learning in vlan sub-router)
TABLE ucAllTopo(switchid, portid, switchid, portid);
TABLE allTopology(switchid, portid, switchid, portid);


OUTGOING start_timer_out(start_timer) THEN
  SEND TO 127.0.0.1 9091;

/////////////////////////////////////////////////

// For OSPF external server

EVENT linkstate_up {srcsw: switchid, srcpt: portid, dstsw: switchid, dstpt: portid, cost: int};
EVENT linkstate_down {srcsw: switchid, srcpt: portid, dstsw: switchid, dstpt: portid};
EVENT switch_config {swid: switchid, ptid: portid, prefix: ipaddr, mask: int};
EVENT static_route {swid: switchid, outport: portid, prefix: ipaddr, mask: int};

OUTGOING send_linkstate_up(linkstate_up) THEN
  SEND TO 127.0.0.1:9999;
OUTGOING send_linkstate_down(linkstate_down) THEN
  SEND TO 127.0.0.1:9999;
OUTGOING send_switch_config(switch_config) THEN
  SEND TO 127.0.0.1:9999;
OUTGOING send_static_route(static_route) THEN
  SEND TO 127.0.0.1:9999;

// table "routes" declared in L3external will query the server

// send updates to linkstate (use "all" topology table to include links via subnets)
// (use router ids, not vlan switch ids, which are what the topo relations store)
ON timer_expired(timer) WHERE timer.id = "tNIB":
  DO send_linkstate_up(lsu) WHERE
    ////////////////// new tuple in topology
    NOT allTopology(vlansrcsw, physrcpt, vlandstsw, phydstpt) AND
    ucAllTopo(vlansrcsw, physrcpt, vlandstsw, phydstpt) AND
    ////////////////// get the corresponding router ports (physrcpt --> vlanrouterside --> lsu.srcpt)
    p2r(vlansrcsw, physrcpt, vlanroutersidesrc) AND
    vr2rr(vlansrcsw, vlanroutersidesrc, lsu.srcpt) AND
    p2r(vlandstsw, phydstpt, vlanroutersidedst) AND
    vr2rr(vlandstsw, vlanroutersidedst, lsu.dstpt) AND
    ////////////////// get the corresponding router sub-switch ids
    router_vlan(lsu.srcsw, vlansrcsw) AND
    router_vlan(lsu.dstsw, vlandstsw) AND
    ////////////////// get the corresponding cost for that router port
    ospf_costs(lsu.srcsw, lsu.srcpt, lsu.cost);

  DO send_linkstate_down(lsd) WHERE
    ////////////////// lost a tuple in topology
    allTopology(vlansrcsw, physrcpt, vlandstsw, phydstpt) AND
    NOT ucAllTopo(vlansrcsw, physrcpt, vlandstsw, phydstpt) AND
    ////////////////// get the corresponding router ports (physrcpt --> vlanrouterside --> lsd.srcpt)
    p2r(vlansrcsw, physrcpt, vlanroutersidesrc) AND
    vr2rr(vlansrcsw, vlanroutersidesrc, lsd.srcpt) AND
    p2r(vlandstsw, phydstpt, vlanroutersidedst) AND
    vr2rr(vlandstsw, vlanroutersidedst, lsd.dstpt) AND
    ////////////////// get the corresponding router sub-switch ids
    router_vlan(lsd.srcsw, vlansrcsw) AND
    router_vlan(lsd.dstsw, vlandstsw);

// subnets(192.168.1.0, 24, 192.168.1.1, ca:fe:00:01:00:06, 0x100000000001, 2).
TABLE sentConfig(int);
ON timer_expired(timer) WHERE timer.id = "tNIB" AND NOT sentConfig(0):
  INSERT (0) INTO sentConfig;
  DO send_switch_config(sc) WHERE
    subnets(sc.prefix, sc.mask, ANY, ANY, sc.swid, sc.ptid);
  DO send_static_route(sr) WHERE
    static_nexthops(sr.swid, sr.prefix, sr.mask, nexthop) AND
    subnets(ANY, ANY, nexthop, ANY, sr.swid, sr.outport);

/////////////////////////////////////////////////

// Give the switches some time to register
ON startup(empty_event):
  DO start_timer_out(st) WHERE
    st.seconds = 15 AND st.id = "tNIB";

/////////////////////////////////////////////////

ON timer_expired(timer) WHERE timer.id = "tNIB":
  // Send a fresh probe packet from all physical ports
  DO emit(newpkt) WHERE
    router_vlan(ANY, newpkt.locSw) AND
    p2r(newpkt.locSw, newpkt.locPt, ANY) AND
    newpkt.dlTyp = 0x1001 AND
    newpkt.dlSrc = newpkt.locSw AND newpkt.dlDst = newpkt.locPt;

  // Restart the timer
  DO start_timer_out(st) WHERE st.seconds = 10 AND st.id = "tNIB";

  // Update the concrete relations, empty the under-construction ones
  DELETE (sw1, pt1, sw2, pt2) FROM ucSwTopo WHERE
    ucSwTopo(sw1, pt1, sw2, pt2); // <-- to constrain
  DELETE (sw1, pt1, sw2, pt2) FROM switchTopology WHERE
    switchTopology(sw1, pt1, sw2, pt2); // <-- to constrain
  INSERT (sw1, pt1, sw2, pt2) INTO switchTopology WHERE
    ucSwTopo(sw1, pt1, sw2, pt2);
  DELETE (sw1, sw2) FROM ucTC WHERE
    ucTC(sw1, sw2);
  DELETE (sw, pt) FROM ucTree WHERE
    ucTree(sw, pt);
  DELETE (sw, pt) FROM spanningTree WHERE
    spanningTree(sw, pt);
  INSERT (sw, pt) INTO spanningTree WHERE
    ucTree(sw, pt);

  DELETE (ANY,ANY,ANY,ANY) FROM ucAllTopo;
  INSERT (sw1, pt1, sw2, pt2) INTO allTopology WHERE
    ucAllTopo(sw1, pt1, sw2, pt2);

/////////////////////////////////////////////////

// Allow probe packets through purely L2 switches (root and subnet)
// This will let us detect links that pass through subnets
// All other sub-switches are in switches_without_maclearning (which means normal MACL, not our modified version for VLANs)

// flood forward (routers will not pass them along, so we avoid loops)
ON packet(p) WHERE p.dlTyp = 0x1001 AND
                   NOT switches_without_mac_learning(p.locSw):
  DO forward(new) WHERE new.locPt != p.locPt;

/////////////////////////////////////////////////

// Probe packets incoming on a router, regardless of whether arrival is a switchport

ON packet(pkt) WHERE pkt.dlTyp = 0x1001 AND
                     router_vlan(ANY, pkt.locSw):
  INSERT (pkt.dlSrc, pkt.dlDst, pkt.locSw, pkt.locPt) INTO ucAllTopo;

/////////////////////////////////////////////////

// Deal with probe packets by updating topology, transitive closure, and initial spanning tree
// (But only for layer-2 ports on a VLAN-subswitch: these relations are used by MAC-learning in vlan-subswitches)
ON packet(pkt) WHERE pkt.dlTyp = 0x1001 AND
                     sp_modes(pkt.locSw, pkt.locPt, ANY):
  INSERT (pkt.dlSrc, pkt.dlDst, pkt.locSw, pkt.locPt) INTO ucSwTopo;
  INSERT (pkt.dlSrc, pkt.locSw) INTO ucTC;
  INSERT (sw, pkt.locSw) INTO ucTC WHERE ucTC(sw, pkt.dlSrc);
  INSERT (pkt.dlSrc, sw) INTO ucTC WHERE ucTC(pkt.locSw, sw);
  INSERT (sw1, sw2) INTO ucTC WHERE ucTC(sw1, pkt.dlSrc) AND ucTC(pkt.locSw, sw2);

  // recall: smuggling (orig sw, orig pt) in (dlSrc, dlDst)
  INSERT (pkt.dlSrc, pkt.dlDst) INTO ucTree WHERE
    NOT ucTC(pkt.dlSrc, pkt.locSw) AND NOT ucTC(pkt.locSw, pkt.dlSrc);
  INSERT (pkt.locSw, pkt.locPt) INTO ucTree WHERE
    NOT ucTC(pkt.dlSrc, pkt.locSw) AND NOT ucTC(pkt.locSw, pkt.dlSrc);
