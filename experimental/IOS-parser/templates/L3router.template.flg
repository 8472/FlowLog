/*
 * Basic functionality for routing to directly attached subnets.
 *
 * (description goes here)
 *
 * TODO:
 *  - split out an "interfaces" relation which has (ip, mac, locsw, locpt)
 *  - would be great if NAT were't explicitly included here
 */

INCLUDE "@|basename|/Arp_Cache.flg";
INCLUDE "@|basename|/NATgeneric.flg";
INCLUDE "@|basename|/L3external.flg";

/*******************************************************************************
 *
 * Data Structures
 *
 ******************************************************************************/

// Information about directly attached subnets
//
// Column values:
// subnet addr, subnet mask, gw ip, gw mac, locSw, locpt
TABLE subnets(ipaddr, int, ipaddr, macaddr, switchid, portid);

// Table representing packets which router needs to send an ARP query for
//
// TODO(adf): how do we deliver this packet later???
// TODO(adf): actually store the packet buffer, not just its nwdst
TABLE router_queued(ipaddr);

// Table matching routers with their NATs
//
// Column values:
// router locSw, NAT locSw
TABLE router_nat(switchid, switchid);

// Table matching routers with their translation switches
//
// Column values:
// router locSw, translator locSw
TABLE router_tr(switchid, switchid);

// Table matching routers with their ACL switches
//
// Column values:
// router locSw, acl locSw
TABLE router_acl(switchid, switchid);

/*******************************************************************************
 *
 * L3 routing to directly attached subnets
 *
 * Only wrinkle is that we need to send packets to our NAT switch if they need
 * to be un-NAT'd before processing, plus the rule to send packets to the NAT
 * if their source says they need it.
 *
 ******************************************************************************/

// directly attached w/o NAT
ON ip_packet(pkt):
  DO forward(new) WHERE
    subnets(addr, mask, out_gateway_ip, new.dlSrc, pkt.locSw, new.locPt)
    and pkt.nwDst IN addr/mask
    // exempt packets which need NAT first
    and (NOT @needs-nat-disj OR
         NOT natconfig(natid, ANY, ANY, out_gateway_ip))
    // exempt packets to the NAT (note positive use of router_nat since 1-1 between rtr & nat)
    and router_nat(pkt.locSw, natid)
    and NOT natconfig(natid, ANY, ANY, pkt.nwDst);

///////////////////////////////////////////////////
// locally-attached NAT and return-traffic -> NAT subswitch

// OUTGOING (matches NAT policy + to nat-outside interface) ---> NAT table
ON ip_packet(pkt):
  DO forward(new) WHERE
    router_nat(pkt.locSw, natid)
    and @needs-nat-disj
    and pkt.locPt != 1 // not coming from NAT
    and natconfig(natid, ANY, ANY, natgw) // nat for this router has natgw as an outside addy
    and subnets(p, m, natgw, ANY, pkt.locSw, wouldpt) // we'd send to the port with that IP (thus out a "nat outside" iface)
    and pkt.nwDst IN p/m // immediately attached subnet destination
    and new.locPt = 1;

// INCOMING (directed to a gateway that is running NAT) ---> NAT table
ON ip_packet(pkt):
  DO forward(new) WHERE
    // directed to a gateway
    subnets(ANY, ANY, pkt.nwDst, ANY, pkt.locSw, pkt.locPt)
    and router_nat(pkt.locSw, nrtr)
    // that is a NAT outside addr
    and natconfig(nrtr, ANY, ANY, pkt.nwDst)
    and new.locPt = 1;


/*******************************************************************************
 *
 * Per-subnet translators: inbound path
 *
 * The inbound path is simple: just pass from port 2N-1 to port 2N for every
 * subnet N. Note that subnet N is attached to port N+1 on the router.
 *
 ******************************************************************************/

ON ip_packet(pkt):
  DO forward(new) WHERE
    subnets(ANY, ANY, ANY, pkt.dlDst, router, rport)
    and router_tr(router, pkt.locSw)
    and router_portmap(rport, pkt.locPt, new.locPt); // host -> router

/*******************************************************************************
 *
 * Per-subnet translators: outbound path
 *
 * Our goal here is to rewrite the destination MAC address (dlDst) based on the
 * IP address. This mapping is obtained from ARP, so we first try to do the
 * rewrite based on the ARP cache. If the ARP cache lacks a mapping, we store
 * the packet, issue an ARP request, and later forward the packet once the ARP
 * reply is received.
 *
 ******************************************************************************/

// Default path: set dlDst based on ARP cache and send to subnet N (port 2N).
// we receive from port 2N-1. note that subnet N is at port N+1 on the router.


ON ip_packet(pkt):
  DO forward(new) WHERE
    subnets(addr, mask, gwip, ANY, router, rport)
    and router_tr(router, pkt.locSw)
    and pkt.nwDst IN addr/mask // MAKING FINAL HOP
    and cached(pkt.nwDst, new.dlDst) // set final dlDst
    and pkt.nwDst != gwip
    and router_portmap(rport, new.locPt, pkt.locPt); // router -> host

// Alternate path: send an ARP request for IPs we can't translate and queue the pkt
// Since we can't queue the packet, there will be an initial ping lost to ARP resolution
// That's not so unusual: it seems that some Cisco switches will also lose the first pkt to ARP.
ON ip_packet(pkt) WHERE subnets(addr, mask, gwip, gwmac, router, rport)
                        and router_tr(router, pkt.locSw)
                        and pkt.nwDst IN addr/mask
                        and not cached(pkt.nwDst, ANY)
                        and pkt.dlDst != gwmac
                        and pkt.nwDst != gwip
                        and router_portmap(rport, ANY, pkt.locPt): // any router side

  INSERT (pkt.nwDst) INTO router_queued;


  // Send requests out of every ACL sub-router (avoid burdening the core)
  DO emit_arp(new) WHERE
    not router_queued(pkt.nwDst) and // only send the request once
    // don't use router_vlan(router, new.locSw), since since router is bound in the ON clause above
    router_vlan(router, new.locSw) and // send only out this one subnet

    // only send out into the appropriate subnet (convert to physical port number)
    vr2rr(new.locSw, hside, rport) AND
    p2r(new.locSw, new.locPt, hside) AND

    new.dlDst = ff:ff:ff:ff:ff:ff and
    new.dlSrc = 00:00:ca:fe:ca:fe and // controller mac addr

    new.arp_op = 1 and // ARP request
    new.arp_tpa = pkt.nwDst and
    new.arp_sha = 00:00:CA:FE:CA:FE and // Controller MAC
    new.arp_spa = 10.10.10.1; // Controller IP addr

// don't keep in the router queue
// not strictly needed, but good to clean up
ON arp_packet(reply) WHERE reply.arp_op = 2 AND router_queued(reply.arp_spa):
  DELETE (reply.arp_spa) FROM router_queued;
 // TODO(tn): here is where we'd unqueue the packet and send with appropriate MAC

// with the above physically wired translators, we are trying to achieve
// sequential composition with what is, logically, this program:
//
//  ON ip_packet(pkt):
//    DO forward(new) WHERE
//      cached(pkt.nwDst, new.dlDst);
//
//  (on the outbound direction of the router). plus, issuing ARP requests
//  for addresses we don't know how to translate
