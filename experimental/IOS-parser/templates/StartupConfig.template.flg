INCLUDE "@|basename|/L3router.flg";
INCLUDE "@|basename|/L3acl.flg";
INCLUDE "@|basename|/Mac_Learning.inc.flg";
INCLUDE "@|basename|/NIB.flg";
INCLUDE "@|basename|/Vlans.flg";

/* Explanation of port number types:

   Because Exodus splits a router into multiple sub-switches with different notions of "port",
   different namespaces can get confusing.

   PHYSICAL PORTS: on the "host" side of the vlan sub-switch.
     These include switchport interfaces and normal interfaces that aren't virtual

   ROUTER PORTS: on the "host" side of the router sub-switch
     These include all interfaces visible from L3, including virtuals.
     The indices start with 2, because the

   ADJUSTED ROUTER PORTS: these are the "router" side ports on the vlan-subswitch.
     Same number as the router ports, but offset by the number of physical ports
     on the subswitch. (1...n = physical; n+1...n+m = adjusted router)

   So the "router port" should be used in relations like subnet, that operate at the
   router-subswitch level, but the "adjusted" port should be used to talk about the router's
   counterparts on the vlan switch.

   There won't always be a 1-1 relationship between these! For instance, a vlan with 2 physical ports but one
   subnet will have a single switched virtual interface (a single routing port visible at L3).

   The p2r relation holds each vlan's physical<--->adjusted router mapping.
   The vr2rr relation holds each vlan's adjusted router <----> router mapping.

*/



TABLE routerAlias(string, switchid);

// OSPF outgoing costs
// switch -> routing port id -> cost
TABLE ospf_costs(switchid, portid, int);

// cached, switches_without_mac_learning, subnets: declared in INCLUDED files

// Maps subnet number -> (host side, router side)
//
// TODO(tn): to be replaced with:
//
// router_portmap(rp, host, rside) =
//    math_mult(2, tmp, rside) and math_sub(rport, 1, tmp)
//    and math_sub(rside, 1, host)
//
TABLE router_portmap(portid, portid, portid);


// holds static routes given in config files. equal standing with ospf routes.
// superceded by policy routes, though
// Will be joined with subnets to find port for next hop in 4th column
TABLE static_nexthops(switchid, ipaddr, int, ipaddr);

/*******************************************************************************
 *
 * Startup values
 *
 ******************************************************************************/

ON startup(e):
@startupinserts

  //  LOL. MATH.
@routerportmap
