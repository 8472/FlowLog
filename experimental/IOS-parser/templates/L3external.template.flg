/*
 * Basic functionality for handling external (non-directly attached) subnets.
 *
 * The core of this module is a routing table with a list of subnets and their
 * corresponding gateway's IP address.
 *
 *
 * TODO:
 *  - should issue ARP requests for every nexthop (gateway) IP
 *    automatically, rather than requiring they be entered into the cached
 *    relation by hand at startup.
 */

/*******************************************************************************
 *
 * Data Structures
 *
 ******************************************************************************/

// Routing table for non-directly attached subnets
// subnet, mask, next-hop IP
// TABLE routes(ipaddr, int, ipaddr);

// router id, prefix, mask, outport
REMOTE TABLE routes(switchid, ipaddr, int, portid)
  FROM routes AT 127.0.0.1 9999
  TIMEOUT 25 seconds;

/*******************************************************************************
 *
 * L3 routing to non-directly attached subnets
 *
 * TODO(adf): would be great if NAT were not explicitly considered here
 *
 ******************************************************************************/

// packets destined to outside whose source does NOT need NATing
// (NAT is handled by L3router.flg, even for non-local traffic)

// POLICY ROUTING
ON ip_packet(pkt):
  DO forward(new) WHERE
    // not in a local subnet for this router
    NOT (@dst-local-subnet)
    // don't route packets which need NAT'ing (must send them to NAT first: see L3router)
    and NOT @needs-nat-disj

    // next-hop obtained from policy routing
    and @policyroute-route
    and subnets(nexthop_subnet, nexthop_mask, ANY, new.dlSrc, pkt.locSw, new.locPt)
    and nexthop IN nexthop_subnet/nexthop_mask
    and cached(nexthop, new.dlDst); // MAC addr of nexthop IP

// STATIC OR OSPF ROUTING
// (no support for default-policy routing)
ON ip_packet(pkt):
  DO forward(new) WHERE
    // not in a local subnet for this router
    NOT (@dst-local-subnet)
    // don't route packets which need NAT'ing (must send them to NAT first: see L3router)
    and NOT @needs-nat-disj

    // WORKAROUND: OF 1.0 requires IN_PORT use, even if inport isn't constrained in OF rule pred.
    // TODO(tn): modify FL compiler to properly assert IN_PORTs as needed. But for now,
    // since our routers may need to bounce packets back modified, trick the compiler into constraining inport:
    // DOWNSIDE TODO(tn): We ought to fix this with more than a workaround since this causes O(#external-subnets^2)
    // added rules. Something smarter could only add O(#external-subnets) rules by using priorities.
    and switch_has_port(pkt.locSw, pkt.locPt)

    and routes(pkt.locSw, pre, mask, new.locPt) AND
    pkt.nwDst IN pre/mask AND
    // special predicate with special compilation "routes" is hard-coded, do not change!
    NOT hasLongerPrefixMatch(pkt.locSw, pkt.nwDst, pre, mask)

    // no policy route available
    // used to refer to policyroute-pass, but can just negate
    and not @policyroute-route

    // output dlsrc and port
    and subnets(ANY, ANY, ANY, new.dlSrc, pkt.locSw, new.locPt)


    // allTopology has vlan switch ids. need to convert both pkt.locSw->vlan and nextsw -> rtr.
    and router_vlan(pkt.locSw, currvlsw)
    and vr2rr(currvlsw, c_rsidept, new.locPt) // c_rsidept: the router-side port on the vlan switch the new pkt will emerge from
    and p2r(currvlsw, currphysport, c_rsidept) // currphysport: the host-side port of the vlan switch the new pkt will emerge from

    // must set output dldst, too. don't need to use the cache here. just find the gateway
    AND allTopology(currvlsw, currphysport, nextvlansw, nextphyspt)
    and router_vlan(nextrtr, nextvlansw)

    and vr2rr(nextvlansw, n_rsidept, nextrpt)
    and p2r(nextvlansw, nextphyspt, n_rsidept)

    and subnets(ANY, ANY, ANY, new.dlDst, nextrtr, nextrpt);



/*******************************************************************************
 *
 * Per-subnet translators: outbound path to nexthop MAC addr where destination
 * MAC address is already set.
 *
 * TN note: the _inbound_ path for TR switches is handled in L3router.flg
 * This isn't just passthrough: we need to make sure the packet has been hit by the above rule.
 *
 ******************************************************************************/



// Packet arrives at TR from router side, need to send out host side
// TODO(TN): this will not work properly for policy routing

ON ip_packet(pkt) WHERE router_tr(router, pkt.locSw):
  DO forward(new) WHERE

    // not in a local subnet for this router
    // (prevent overlap with L3router.flg; avoiding universal quantification issue)
    NOT (@dst-local-subnet)

    and router_portmap(ANY, new.locPt, pkt.locPt); // router -> host (only one instance of this number in the table)
    // router already set the destination MAC, so use that to find the output port
   // and subnets(ANY, ANY, ANY, pkt.dlDst, router, rport)
//and router_portmap(rport, new.locPt, pkt.locPt); // router -> host
