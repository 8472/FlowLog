(maclearning_test
 (learned_TCC1 0
  (learned_TCC1-1 nil 3585401310 ("" (subtype-tcc) nil nil) nil nil))
 (consistency_invariant_1_TCC1 0
  (consistency_invariant_1_TCC1-1 nil 3585402946
   ("" (subtype-tcc) nil nil) nil nil))
 (consistency_invariant_1 0
  (consistency_invariant_1-1 nil 3585403853
   ("" (skosimp*)
    (("" (expand plus_learned)
      (("" (expand minus_learned)
        (("" (skosimp)
          (("" (inst 2 "pkt!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((plus_learned const-decl "bool" maclearning_test nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (PACKET type-eq-decl nil maclearning_test nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (minus_learned const-decl "bool" maclearning_test nil))
   shostak))
 (consistency_invariant_2 0
  (consistency_invariant_2-1 nil 3585402948
   ("" (skosimp*)
    (("" (expand plus_learned)
      (("" (skosimp*)
        (("" (lemma single_packet)
          (("" (inst -1 "t!1" "pkt!1" "pkt!2") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plus_learned const-decl "bool" maclearning_test nil)
    (single_packet formula-decl nil maclearning_test nil)
    (PACKET type-eq-decl nil maclearning_test nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (consistency 0
  (consistency-1 nil 3585401315
   ("" (induct t)
    (("1" (skosimp 1)
      (("1" (expand learned)
        (("1" (expand plus_learned)
          (("1" (skosimp)
            (("1" (skosimp)
              (("1" (lemma single_packet)
                (("1" (inst -1 "0" "pkt!1" "pkt!2")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (inst -1 "sw!1" "pt1!1" "pt2!1" "mac!1")
          (("2" (expand "learned" -2)
            (("2" (expand "learned" -3)
              (("2" (assert)
                (("2" (lemma consistency_invariant_1)
                  (("2"
                    (inst -1 "1 + j!1" "sw!1" "pt1!1" "pt2!1" "mac!1")
                    (("2" (assert)
                      (("2" (grind)
                        (("1" (lemma single_packet)
                          (("1" (inst -1 "1 + j!1" "pkt!1" "pkt!2")
                            (("1" (lemma single_packet)
                              (("1"
                                (inst -1 "1 + j!1" "pkt!1" "pkt!3")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma single_packet)
                          (("2" (inst -1 "1 + j!1" "pkt!1" "pkt!2")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((consistency_invariant_1 formula-decl nil maclearning_test nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_learned const-decl "bool" maclearning_test nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_learned const-decl "bool" maclearning_test nil)
    (PACKET type-eq-decl nil maclearning_test nil)
    (single_packet formula-decl nil maclearning_test nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (learned inductive-decl "bool" maclearning_test nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

